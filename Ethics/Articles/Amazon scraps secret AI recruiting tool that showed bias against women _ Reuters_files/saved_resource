function fpv() {
	try {
		if(navigator.mimeTypes["application/x-shockwave-flash"].enabledPlugin){
			return (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]).description.replace(/\D+/g, ",").match(/^,?(.+),?$/)[1];
		}
	} catch(e) {}
	return '0,0,0';
}

function gL() {
	if (top && top != self) {
		var loc = document.referrer || document.location;
	} else if (window && location) {
		var loc = window.location;
	} else {
		var loc = document.location;
	}
	loc = loc + '';
	if (loc && loc.length > 1000) {loc = loc.substring(0,1000);}
	return loc;
}
function gRF() {
	var mrf = '';
	if (document && document.referrer && document.referrer != document.location) {
		mrf = document.referrer + '';
		if (mrf && mrf.length > 1000) {mrf = mrf.substring(0,1000);}
	}
	return mrf;
}
function modEnc(v) {
	if (v) {
		var v = encodeURIComponent(v);
		v = v.replace(/%2F/g, '_@2F');v = v.replace(/%3F/g, '_@3F');v = v.replace(/%26/g, '_@26');v = v.replace(/%3B/g, '_@3B');v = v.replace(/%5C/g, '_');v = v.replace(/%255c/g, '_');v = v.replace(/%23/g, '_@23');v = v.replace(/%253B/g, '_@3B');v = v.replace(/%253F/g, '_@3F');
		v = v.replace(/\'|\(|\)|\!/g, '');
		return v;
	} else {
		return '';
	}
}
function gSWHD() {
	var w = (screen.width) ? screen.width:0;var h = (screen.height) ? screen.height:0;var px = 1;
	if (w && window && window.devicePixelRatio && window.devicePixelRatio > 0 && window.devicePixelRatio < 100) {
		px = window.devicePixelRatio;
	}
	return w+'x'+h+'x'+px;
}

function gMDL() {
	var modDL = '';
	if (typeof(modDataLayer) == 'object') {
		for (var key in modDataLayer) {
			var obj = modDataLayer[key];
			for (var prop in obj) {
				if (obj.hasOwnProperty(prop)){
					modDL += prop+'='+obj[prop]+';';
				}
			}
		}
	}
	modDL += '';
	if (modDL && modDL.length > 6) {
		return 'mod_data_layer='+modDL;
	} else {
		return '';
	}
}
var mdjs = {};
mdjs._dL = {};
mdjs.fp = fpv();
mdjs.loc = modEnc(gL());
mdjs.mrf = modEnc(gRF());
mdjs.swhd = gSWHD();
mdjs.mDL = modEnc(gMDL());
if (mdjs.loc && mdjs.loc.indexOf('https') > -1) {
	mdjs.proto = 'https:';
} else if (window && window.location && window.location.protocol == 'https:') {
	mdjs.proto = 'https:';
} else {
	mdjs.proto = 'http:';
}

mdjs.targeting = {
	get:function(k) {
		var idl = 'ct';
		return (typeof mdjs._dL[idl] == 'object' && typeof mdjs._dL[idl][k] != 'undefined') ? mdjs._dL[idl][k] : null;
	},
	getCustom:function() {
		var idl = 'ct';
		return (typeof mdjs._dL[idl] == 'object') ? mdjs._dL[idl] : null;
	},
	getList:function() {
		var idl = 'd';
		return (typeof mdjs._dL[idl] == 'object') ? mdjs._dL[idl] : null;
	},
	getKeys:function() {
		var idl = 'dt';
		return (typeof mdjs._dL[idl] == 'object') ? mdjs._dL[idl] : null;
	}
};
mdjs.$ = function (s) {
var
	add = function (el, ev, fn) {
		if (el.addEventListener) { el.addEventListener(ev, fn); } else if (el.attachEvent) { el.attachEvent('on'+ev, fn); }
	},
	remove = function (el, ev, fn) {
		if (el.removeEventListener) { el.removeEventListener(ev, fn); } else if (el.detachEvent) { el.detachEvent('on'+ev,fn); }
	},
	iterate = function (fn) {
		var els = (typeof(s) === 'string' || s instanceof String) ? document.querySelectorAll(s) : [s];
		for (var i = 0; i < els.length; i++) { fn(els[i]); } return this;
	};
	defer = function (fn) {
		if (document.body) { fn(); }
		else { window.addEventListener('DOMContentLoaded', fn); }
	}

	if (window.MutationObserver && !Element.prototype.matches) {
		Element.prototype.matches =
			Element.prototype.matchesSelector ||
			Element.prototype.mozMatchesSelector ||
			Element.prototype.msMatchesSelector ||
			Element.prototype.webkitMatchesSelector;
	}
return {
	'on': function (ev, fn) { return iterate(function (el) {
		add(el, ev, fn);
	}); },
	'one': function (ev, fn) { return iterate(function (el) {
		add(el, ev, function (e) {
			remove(el, ev, arguments.callee);
			fn();
		});
	}); },
	'delegate': function (ev, fn) {
		defer(function () {
			add(document.body, ev, function (e) { iterate(function (el) {
				if (e.target == el) { fn(); }
			}); });
		});
	},
	'delOne': function (ev, fn) {
		defer(function () {
			add(document.body, ev, function (e) {
				var callee = arguments.callee;
				iterate(function (el) {
					if (e.target == el) {
						remove(document.body, ev, callee);
						fn();
					}
				});
			});
		});
	},
	'watch': function (fn) {
		defer(function () {
			if (window.MutationObserver && Element.prototype.matches) {
				var callback = function(mutationsList) {
					for(var m = 0; m < mutationsList.length; m++) { var mutation = mutationsList[m];
						for(var n = 0; n < mutation.addedNodes.length; n++) { var node = mutation.addedNodes[n];
							if(node.nodeType == 1 && node.matches(s)) { fn(); }
						}
					}
				};
				var observer = new MutationObserver(callback);
				observer.observe(document.body, {childList:true,subtree:true});
			};
		});
	},
	'append': function (n) { return iterate(function (el) { el.appendChild(n); }); },
	'prepend': function (n) { return iterate(function (el) { el.insertBefore(n, el.firstChild); }); },
	'empty': function () { return this.iterate(function (el) {
		for (var i = el.childNodes.length; i > 0; i--) { el.removeNode(el.firstChild); }
	}); }
}; };
var mdNode = mdNode || [];
try {
	mdNode['s'] = document.querySelector("script[src*='dc54d4678e62010da03e468039cfe826/0.0.async']");
} catch (e) {
	var scripts = document.getElementsByTagName('script');
	for (var i = 0; i < scripts.length; i++) {
		if (scripts[i].src.indexOf('dc54d4678e62010da03e468039cfe826/0.0.async') >= 0) {
			mdNode['s'] = scripts[i];
		}
	}
}
var _mdSct = document.createElement("script");_mdSct.setAttribute("type", "text/javascript");
	_mdSct.setAttribute("src", '//ad.wsod.com/site/dc54d4678e62010da03e468039cfe826/1.0.async/1645709145;'+mdjs.fp+';'+mdjs.swhd+';'+mdjs.loc+';'+mdjs.mrf+';'+mdjs.mDL+';');
	_mdSct.setAttribute("async", "async");mdNode['s'].parentNode.appendChild(_mdSct);
